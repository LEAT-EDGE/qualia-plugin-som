[bench]
name = "DLDSOM_CORe50_ResNet_float32_train"
seed = 2
first_run = 1
last_run = 1
plugins = ['qualia_plugin_som']

[learningframework]
kind = 'PyTorchDLSOM'
params.label_ratio = 1.0

[deploy]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
quantize = ['int16']
optimize = ['']

[dataset]
kind = "CORe50"
params.path = "data/core50"
params.variant = 'category'
#params.variant = 'object'
#params.sessions = ['s1']

[[preprocessing]]
kind = "Class2BinMatrix"

#[[preprocessing]]
#kind = "Normalize"
#params.method = 'z-score'
#params.method = 'min-max'
#params.axis = 0
#params.debug = true

#[[postprocessing]]
#kind = "FuseBatchNorm"
#export = true

#[[postprocessing]]
#kind = "QuantizationAwareTraining"
#export = true
#params.width = 16
#params.epochs = 0
#params.batch_size = 128
#params.model.params.quantize_bias	= true
#params.model.params.quantize_linear	= true
#params.force_q = 9

[model_template]
kind = "DLSOM"

epochs = 0
#load = true
#train = false

params.dl.kind = "TorchVisionModel"
params.dl.epochs = 0
params.dl.load = true
params.dl.fuse_batch_norm = true
params.dl.batch_size = 256

params.fm_output = 'pretrained_model_avgpool'

params.som.epochs = 5
params.som.batch_size = 1024
params.som.params.som_layer = "DSOM"
params.som.params.neurons = [16, 19]
params.som.params.label_sigma = 3.7811028108399047
params.som.params.learning_rate = 0.007581167314163834
params.som.params.elasticity = 1.5934738178681074

[[model]]
name = "core50_dldsom_torchvisionresnet18"
params.dl.name = "core50_torchvisionresnet18"
params.dl.iteration = 1
params.dl.params.model = 'resnet18'
params.dl.params.pretrained = true
disabled = false
#disabled = true

#[[model]]
#name = "core50_dldsom_torchvisionresnet152"
#params.dl.name = "core50_torchvisionresnet152_r1"
#params.dl.params.model = 'resnet152'
#params.dl.params.pretrained = true
#disabled = false
#disabled = true


[parameter_research]
params.optimize.params.n_trials = 1000
params.study.load = false
params.study.params.direction = "maximize"
params.study.params.study_name = "Core50_DLDSOM_ResNet_parameter_research_full2"
params.study.params.storage = "sqlite:///out/parameter_research.sqlite"
params.study.params.load_if_exists = true

[parameter_research.params.trial]
params.som.params.elasticity.kind = 'suggest_float'
params.som.params.elasticity.params.name = 'elasticity'
params.som.params.elasticity.params.low = 0.1
params.som.params.elasticity.params.high = 10.0
params.som.params.learning_rate.kind = 'suggest_float'
params.som.params.learning_rate.params.name = 'learning_rate'
params.som.params.learning_rate.params.low = 0.02
params.som.params.learning_rate.params.high = 1.0
params.som.params.label_sigma.kind = 'suggest_float'
params.som.params.label_sigma.params.name = 'label_sigma'
params.som.params.label_sigma.params.low = 2.0
params.som.params.label_sigma.params.high = 10.0
params.som.epochs.kind = 'suggest_int'
params.som.epochs.params.name = 'epochs'
params.som.epochs.params.low = 5
params.som.epochs.params.high = 30

[[parameter_research.params.trial.params.som.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_x'
params.low = 48
params.high = 192

[[parameter_research.params.trial.params.som.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_y'
params.low = 48
params.high = 192
