[bench]
name = "HD_DLDSOM_float32_train"
seed = 2
first_run = 1
last_run = 1
plugins = ['qualia_plugin_som']

[learningframework]
kind = 'PyTorchDLSOM'

[deploy]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
quantize = ['int16']
optimize = ['']

[dataset]
kind = "HD"
params.path = "data/hd_audio"
params.variant = 'by-subject'
params.test_subjects = [2]

[[preprocessing]]
kind = "Class2BinMatrix"

#[[preprocessing]]
#kind = "Normalize"
#params.method = 'z-score'
#params.method = 'min-max'
#params.axis = 0
#params.debug = true

#[[postprocessing]]
#kind = "FuseBatchNorm"
#export = true

#[[postprocessing]]
#kind = "QuantizationAwareTraining"
#export = true
#params.width = 16
#params.epochs = 0
#params.batch_size = 128
#params.model.params.quantize_bias	= true
#params.model.params.quantize_linear	= true
#params.force_q = 9

[model_template]
kind = "DLSOM"

#epochs = 0
#load = true
#train = false

params.dl.kind = "CNN"
params.dl.epochs = 0
params.dl.load = true
params.dl.batch_size = 256
params.dl.params.prepool 		= 2
params.dl.params.dims		= 1

params.fm_output = 'postpool'

params.som.epochs = 15
params.som.batch_size = 256
params.som.params.som_layer.kind = "DSOM"
params.som.params.neurons = [22, 22]
params.som.params.label_sigma = 4.877948923266619
params.som.params.som_layer.params.learning_rate = 0.35174683297767348
params.som.params.som_layer.params.elasticity = 0.37136293252868753

[[model]]
name = "hd_dlsom_cnn_m5_smaller"
disabled = false
params.dl.params.filters          = [16, 16, 32, 64]
params.dl.params.kernel_sizes     = [40, 3, 3, 3]
params.dl.params.paddings         = [20, 1, 1, 1]
params.dl.params.strides          = [8, 1, 1, 1]
params.dl.params.pool_sizes       = [4, 4, 4, 4]
params.dl.params.postpool         = 3
params.dl.params.fc_units         = []
params.dl.params.batch_norm       = false

params.dl.name = "hd_cnn_m5_smaller_r1"


[parameter_research]
optimize.params.n_trials = 100
study.load = false
study.params.direction = "maximize"
study.study_name = "HD_DLDSOM_CNN_parameter_research"
study.params.storage = "sqlite:///out/parameter_research.sqlite"
study.params.load_if_exists = true

[parameter_research.trial]
params.som.params.som_layer.params.elasticity.kind = 'suggest_float'
params.som.params.som_layer.params.elasticity.params.name = 'elasticity'
params.som.params.som_layer.params.elasticity.params.low = 0.005
params.som.params.som_layer.params.elasticity.params.high = 16.0
params.som.params.som_layer.params.learning_rate.kind = 'suggest_float'
params.som.params.som_layer.params.learning_rate.params.name = 'learning_rate'
params.som.params.som_layer.params.learning_rate.params.low = 0.005
params.som.params.som_layer.params.learning_rate.params.high = 8.0
params.som.params.label_sigma.kind = 'suggest_float'
params.som.params.label_sigma.params.name = 'label_sigma'
params.som.params.label_sigma.params.low = 0.1
params.som.params.label_sigma.params.high = 8.0
params.som.epochs.kind = 'suggest_int'
params.som.epochs.params.name = 'epochs'
params.som.epochs.params.low = 1
params.som.epochs.params.high = 60

[[parameter_research.trial.params.som.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_x'
params.low = 3
params.high = 32

[[parameter_research.trial.params.som.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_y'
params.low = 2
params.high = 32
