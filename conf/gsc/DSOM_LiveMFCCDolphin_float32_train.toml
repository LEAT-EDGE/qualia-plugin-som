[bench]
name = "GSC_DSOM_MFCCDolphin_float32_train"
seed = 2
first_run = 1
last_run = 15
plugins = ['qualia_plugin_som']

[learningframework]
kind = 'PyTorchSOM'

[deploy]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
quantize = ['float32']
optimize = ['']
compress = [1]

[dataset]
kind = "GSC"
params.variant = "v2"
params.path = "data/speech_commands_v0.02/"
params.subset = "no_background_noise"

[[preprocessing]]
kind = "Class2BinMatrix"

[[preprocessing]]
kind = "Normalize"
params.method = 'z-score'
params.axis = 0
params.debug = true

#[[data_augmentation]]
#kind = "GaussianNoise"
#params.sigma = 0.00175

#[[data_augmentation]]
#kind = "TimeWarping"
#params.sigma = 0.0675

#[[data_augmentation]]
#kind = "TimeShifting"
#params.alpha = 1.0

#[[data_augmentation]]
#kind = "Mixup"
#params.alpha = 0.5

[[data_augmentation]]
kind = "MFCC"
params.evaluate = true
params.sample_rate = 16000
#params.n_mfcc = 64
params.n_mfcc = 10
params.log_mels = true
params.melkwargs.n_fft = 1024
params.melkwargs.n_mels = 40
#params.melkwargs.win_length = 1024
params.melkwargs.win_length = 640
#params.melkwargs.hop_length = 128
params.melkwargs.hop_length = 320
params.melkwargs.f_min = 20
params.melkwargs.f_max = 4000

# pad by hop_length to obtain expected 1 + floor( (n_samples - window_length) / hop_length) = 49 samples
# https://github.com/librosa/librosa/issues/595#issuecomment-313116650
params.melkwargs.pad = 320
params.melkwargs.center = false


#[[postprocessing]]
#kind = "FuseBatchNorm"
#export = true

[model_template]
kind = "SOM"

params.input_shape	= [49, 10]

epochs = 27
batch_size = 256
params.som_layer = "DSOM"
params.neurons = [5, 16]
params.label_sigma = 0.12663479135255434
params.learning_rate = 0.006224411105967932
params.elasticity = 0.012932335034890137

[[model]]
name = "gscdolphin_dsom"
disabled = false
#disabled = true

[parameter_research]
params.optimize.params.n_trials = 1000
params.study.load = false
params.study.params.direction = "maximize"
params.study.params.study_name = "GSC_DSOM_MFCCDolphin_parameter_research2"
params.study.params.storage = "sqlite:///out/parameter_research.sqlite"
params.study.params.load_if_exists = true

[parameter_research.params.trial]
params.elasticity.kind = 'suggest_float'
params.elasticity.params.name = 'elasticity'
params.elasticity.params.low = 0.0005
params.elasticity.params.high = 0.01
params.learning_rate.kind = 'suggest_float'
params.learning_rate.params.name = 'learning_rate'
params.learning_rate.params.low = 0.00005
params.learning_rate.params.high = 0.1
params.label_sigma.kind = 'suggest_float'
params.label_sigma.params.name = 'label_sigma'
params.label_sigma.params.low = 0.01
params.label_sigma.params.high = 20.0
epochs.kind = 'suggest_int'
epochs.params.name = 'epochs'
epochs.params.low = 1
epochs.params.high = 20

[[parameter_research.params.trial.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_x'
params.low = 6
params.high = 64

[[parameter_research.params.trial.params.neurons]]
kind = 'suggest_int'
params.name = 'neurons_y'
params.low = 6
params.high = 64
